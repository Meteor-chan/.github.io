<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meteor&#39;s Blog</title>
  <subtitle>分享 总结 反思</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Meteor-chan.github.io/"/>
  <updated>2016-09-12T06:45:23.358Z</updated>
  <id>http://Meteor-chan.github.io/</id>
  
  <author>
    <name>Meteor_chan</name>
    <email>Meteor_Chan@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建Github+Hexo博客</title>
    <link href="http://Meteor-chan.github.io/2016/09/12/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://Meteor-chan.github.io/2016/09/12/使用Github-Hexo搭建博客/</id>
    <published>2016-09-11T16:16:27.000Z</published>
    <updated>2016-09-12T06:45:23.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">Node.js</a><br><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></p>
<h2 id="配置SSH-Keys"><a href="#配置SSH-Keys" class="headerlink" title="配置SSH Keys"></a>配置SSH Keys</h2><p>####1.检查本机的SSH keys的设置</p>
<blockquote>
<p>$ cd ~/.ssh</p>
</blockquote>
<p>如果提示 No such file or diretory 说明你是第一次使用git</p>
<a id="more"></a>
<h2 id="软件准备-1"><a href="#软件准备-1" class="headerlink" title="软件准备"></a>软件准备</h2><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">Node.js</a><br><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></p>
<h2 id="配置SSH-Keys-1"><a href="#配置SSH-Keys-1" class="headerlink" title="配置SSH Keys"></a>配置SSH Keys</h2><p>####1.检查本机的SSH keys的设置</p>
<blockquote>
<p>$ cd ~/.ssh</p>
</blockquote>
<p>如果提示 No such file or diretory 说明你是第一次使用git</p>
<h4 id="2-生成新的SSH-keys："><a href="#2-生成新的SSH-keys：" class="headerlink" title="2.生成新的SSH keys："></a>2.生成新的SSH keys：</h4><blockquote>
<p>$ ssh-keygen -t rsa -C “example@email.com”</p>
</blockquote>
<p>注意：上面的C为大写，之后的邮箱地址填上你自己的邮箱地址。 </p>
<p>接着系统会要求你输入密码，这个将在你提交项目的时候会使用到。如果为空，提交项目时将不使用。</p>
<blockquote>
<p>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;<br>Enter same passphrase again:&lt;再次输入加密串&gt;</p>
</blockquote>
<p>注意：在提交密码时，是没有*字样的，所以直接输入就好<br>最后看到如下图所示，SSH key 设置就成功了<br><img src="http://oddhmbjny.bkt.clouddn.com/ssh-key-set.png" alt="SSH key"></p>
<h4 id="3-添加SSH-key到Github账户"><a href="#3-添加SSH-key到Github账户" class="headerlink" title="3.添加SSH key到Github账户"></a>3.添加SSH key到Github账户</h4><p>在本机上生成SSH key之后，需要将SSH key添加到Github账户中以完成链接。</p>
<ul>
<li>首先在C盘Administrator(用户)文件夹下，找到.ssh文件夹，如果找不到文件夹，需要设置显示隐藏文件。在该文件夹下找到id_rsa.pub，使用文本编辑器打开。复制此文件所有内容。</li>
<li>登陆Github账户，打开setting界面，找到SSH and GPG keys项，点击 New SSH key</li>
<li>将在id_rsa.pub文件复制的内容粘贴到Key那一栏，点击Add  SSH key完成添加</li>
</ul>
<h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><p>输入以下命令进行测试</p>
<blockquote>
<p>ssh -T git@github.com</p>
</blockquote>
<p>如果显示如下，则输入yes就好</p>
<blockquote>
<p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)?</p>
</blockquote>
<p>输入之后，将显示</p>
<blockquote>
<p>Hi Meteor-chan! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><p>在完成了SSH与Github的链接之后，我们需要设置用户信息。</p>
<blockquote>
<p>git config –global user.name “name”<br>git config –global user.email “example@email.com”</p>
</blockquote>
<p>注意: 用户名跟邮箱需要填写真实的。</p>
<h2 id="SSH-key成功配置"><a href="#SSH-key成功配置" class="headerlink" title="SSH key成功配置"></a>SSH key成功配置</h2><p>这样本机便成功连接到github了。</p>
<h2 id="使用Github-Pages建立博客"><a href="#使用Github-Pages建立博客" class="headerlink" title="使用Github Pages建立博客"></a>使用Github Pages建立博客</h2><p>Github Pages通常有两种，第一种是基于你用户名建立的UserName.github.io的组织站，另一种是基于项目的Pages，通常我们搭建博客使用的是第一种。具体步骤如下</p>
<ol>
<li>登陆Github账户，创建一个repository，Repository name为username.github.io(此处的username为你的用户名)</li>
<li>进入该项目，点击Settings，找到Launch automatic page generator并点击，一直下一步即可。</li>
<li>通过<a href="http://username.github.io访问静态网站，如[Meteor-chan.github.io][4" target="_blank" rel="external">http://username.github.io访问静态网站，如[Meteor-chan.github.io][4</a>]</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;软件准备&quot;&gt;&lt;a href=&quot;#软件准备&quot; class=&quot;headerlink&quot; title=&quot;软件准备&quot;&gt;&lt;/a&gt;软件准备&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/zh-cn/&quot;&gt;Node.js&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置SSH-Keys&quot;&gt;&lt;a href=&quot;#配置SSH-Keys&quot; class=&quot;headerlink&quot; title=&quot;配置SSH Keys&quot;&gt;&lt;/a&gt;配置SSH Keys&lt;/h2&gt;&lt;p&gt;####1.检查本机的SSH keys的设置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ cd ~/.ssh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果提示 No such file or diretory 说明你是第一次使用git&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://Meteor-chan.github.io/categories/Hexo/"/>
    
    
      <category term="Git" scheme="http://Meteor-chan.github.io/tags/Git/"/>
    
      <category term="Github" scheme="http://Meteor-chan.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例</title>
    <link href="http://Meteor-chan.github.io/2016/09/03/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://Meteor-chan.github.io/2016/09/03/单例模式/</id>
    <published>2016-09-03T12:48:45.444Z</published>
    <updated>2016-09-12T04:24:31.117Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式的定义如下：<br>Ensure a class has only one instance,provide a global point of access to it（确保整个类中只有一个实例，并且自动实例化并向系统提供这个实例）</p>
<a id="more"></a>
<h4 id="单例模式的定义"><a href="#单例模式的定义" class="headerlink" title="单例模式的定义"></a>单例模式的定义</h4><p>单例模式的定义如下：<br>Ensure a class has only one instance,provide a global point of access to it（确保整个类中只有一个实例，并且自动实例化并向系统提供这个实例）</p>
<h4 id="单例模式的通用写法"><a href="#单例模式的通用写法" class="headerlink" title="单例模式的通用写法"></a>单例模式的通用写法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 饿汉式写法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">	<span class="comment">//让类构造方法私有化，使其不能为外界获取</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//通过该方法获取Singleton实例</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> singleton;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//该类中的其他方法，尽量为static方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 懒汉式写法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line"> 	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Object object = <span class="keyword">new</span> Object();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="comment">//使构造方法私有化</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//通过该方法获取Singleton实例</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">synchronized</span>(object)&#123;</div><div class="line">			<span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</div><div class="line">				singleton = <span class="keyword">new</span> Singleton();</div><div class="line">			&#125;</div><div class="line">				<span class="keyword">return</span> singleton;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//类中其他方法，尽量为static方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomwthing</span><span class="params">()</span></span>&#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="单例模式的优缺点"><a href="#单例模式的优缺点" class="headerlink" title="单例模式的优缺点"></a>单例模式的优缺点</h4><ul>
<li>优点</li>
</ul>
<ol>
<li>单例模式在内存中只有一个实例，故能有效减少内存的开销，当一个对象需要频繁创建，销毁。且创建和销毁时性能无法优化，这时单例模式优点十分明显。</li>
<li>由于单例模式中只有一个实例，当一个对象需要比较多的资源时，可以通过创建一次，让其在内存中常驻的方式，这样能有效减少性能开销。</li>
<li>可以减少对资源的占用，，如文件的写动作，由于单例模式的存在，可以避免同一文件的同时写操作。</li>
</ol>
<ul>
<li>缺点</li>
</ul>
<ol>
<li>单例模式没有接口，无法拓展，假如要拓展，那么需要修改代码。</li>
<li>单例模式与单一职责模式互相冲突，单一职责要求的是一个类只负责一个业务逻辑，但是单例模式要求“要单例”和业务逻辑融合在一个类。</li>
</ol>
<h4 id="单例模式的使用场景"><a href="#单例模式的使用场景" class="headerlink" title="单例模式的使用场景"></a>单例模式的使用场景</h4><ol>
<li>一个类中有大量的静态方法和静态常量时(比如工具类)可以考虑使用单例模式</li>
<li>创建一个对象需要占用过大的资源时，比如访问IO和数据库等资源</li>
<li>要求生成唯一序列号的环境</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式的定义如下：&lt;br&gt;Ensure a class has only one instance,provide a global point of access to it（确保整个类中只有一个实例，并且自动实例化并向系统提供这个实例）&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://Meteor-chan.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="设计模式" scheme="http://Meteor-chan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
